#windows查看服务的命令：services.msc
官方文档:http://www.rabbitmq.com/getstarted.html
Python学习:http://book.pythontips.com/en/latest/args_and_kwargs.html
参考博客:



rabbitmqctl list_queues:
rabbitmqctl list_exchanges:
rabbitmqctl list_bindings:


1、简述 RabbitMQ、Kafka、ZeroMQ的区别？

2、RabbitMQ如何在消费者获取任务后未处理完前就挂掉时，保证数据不丢失？

3、RabbitMQ如何对消息做持久化？

4、RabbitMQ如何控制消息被消费的顺序？

5、以下RabbitMQ的exchange type分别代表什么意思？如：fanout、direct、topic。

1-介绍:如何发送和接收来自命名队列的消息
RabbitMQ是一个消息代理：它接受和转发消息。
队列:本质上是一个很大的消息缓冲区,许多生产者可以发送进入一个队列的消息，并且许多消费者可以尝试从一个队列接收数据。

channel.basic_publish（exchange = ''，
                      routing_key = 'hello'，
                      body = 'Hello World！' ):
在RabbitMQ中，消息永远不会直接发送到队列，它总是需要经过交换。
我们现在需要知道的是如何使用由空字符串标识的默认交换。这种交换是特殊的 - 它允许我
们准确地指定消息应该到达哪个队列。队列名称需要在routing_key参数中指定。

我们可以根据需要多次运行该命令，并且只会创建一个。

您可能会问为什么我们再次声明队列 - 我们已经在之前的代码中声明了它。如果我们确信队列已经存在，
我们可以避免这种情况。例如，如果send.py程序之前运行过。但我们还不确定首先运行哪个程序。
在这种情况下，重复在两个程序中重复声明队列是一种很好的做法。


工作队列（又名：任务队列）背后的主要思想是避免立即执行资源密集型任务，并且必须等待完成。
相反，我们安排稍后完成任务。我们将任务封装 为消息并将其发送到队列。在后台运行的工作进程将
弹出任务并最终执行作业。当你运行许多工人时，任务将在他们之间共享。

RabbitMQ默认的消息分发机制:
默认情况下，RabbitMQ将按顺序将每条消息发送给下一个使用者。
平均而言，每个消费者将获得相同数量的消息。这种分配消息的方式称为循环法.（我们可以详细知道谁都干了什么活.）

no_ack =True带来的负面:
用我们目前的代码，一旦RabbitMQ将消息传递给客户，它立即将其标记为删除。
在这种情况下，如果你杀了一个工人，我们将失去刚刚处理的信息。
我们也会失去所有派发给这个特定工作人员但尚未处理的消息。

no_ack = False:
为了确保消息永不丢失，RabbitMQ支持 消息确认。消费者发回ack（请求）
告诉RabbitMQ已经收到，处理了特定的消息，并且RabbitMQ可以自由删除它。
如果消费者死亡（其通道关闭，连接关闭或TCP连接丢失），RabbitMQ将理解消息
未被完全处理，并将重新排队。**如果有其他消费者同时在线，它会迅速将其重新发送给另一
位消费者。这样，即使工作人员偶尔死亡，也可以确保没有任何信息丢失。
没有任何消息超时; 当消费者死亡时，RabbitMQ将重新传递消息。即使处理消息需要
非常很长的时间也没关系。

如何确保即使消费者死亡，任务也不会丢失??(面试题)
具体代码:
ch.basic_ack(delivery_tag=method.delivery_tag)  ===> 返回确认操作.
no_ack = False（要求必须确认.）
缺陷:但是如果RabbitMQ服务器停止，我们的任务仍然会丢失。???

<Basic.Deliver(['consumer_tag=ctag1.81499d951a364d62acb3615072659a5c',
                'delivery_tag=1',
                'exchange=',
                'redelivered=False',
                'routing_key=queue_2'])>



问题:如果RabbitMQ服务器停止，如何确保我们的任务不会丢失?
当RabbitMQ退出或崩溃时，它会忘记队列和消息，除非您告诉它不要。
需要做两件事来确保消息不会丢失：我们需要将队列和消息标记为持久。

队列持久化的方法:（如果队列之前已经存在的话,这个声明将失效：RabbitMQ不允许您使用不同的参数重新定义现有的队列）
channel.queue_declare（queue = 'hello'，durable = True）===>生产者和消费者需要同时更改.

消息持久化的方法:
我们需要将消息标记为持久 - 通过提供值为2的delivery_mode属性.
channel.basic_publish(exchange='',
                      routing_key="task_queue",
                      body=message,
                      properties=pika.BasicProperties(
                         delivery_mode = 2, # make message persistent
                      ))

总结:消费者死掉的处理方法与RabbitMq服务器死掉的处理方法:


公平消息分发的一个问题:
RabbitMq默认的消息处理机制:RabbitMQ不知道任何有关这一点，并仍将均匀地发送消息。
因为RabbitMQ只在消息进入队列时调度消息。它没有考虑消费者未确认消息的数量。
RabbitMQ只是盲目地将第n条消息分发给第n个消费者。（牛逼的一句话.）即每个任务只被传递给一个工作人员。

prefetch_count = 1设置。这告诉RabbitMQ一次不要向工作人员发送多个消息。
或者换句话说，不要向工作人员发送新消息，直到它处理并确认了前一个消息。相反，
它会将其分派给不是仍然忙碌的下一个工作人员。

不要向工作人员发送新消息，直到它处理并确认了前一个消息.**


发布:基本上，发布的日志消息将被广播给所有的接收者。
简单模型汇总：
甲生产者是发送消息的用户的应用程序。
甲队列是存储消息的缓冲器。
甲消费者是接收消息的用户的应用程序。

RabbitMQ的消息传递模型:
RabbitMQ中的消息传递模型的核心思想是生产者永远不会将任何消息直接发送到队列中。
实际上，生产者通常甚至不知道邮件是否会被传送到任何队列中,相反，制作人只能发送消息给交易所。

exchange的作用:
交换是一件非常简单的事情。一方面它接收来自生产者的消息，另一方则推动他们排队。
交易所必须知道如何处理收到的消息。是否应该附加到特定队列？它应该附加到许多队列中吗？
或者它应该被丢弃。这些规则由交换类型定义。
之前我们使用了Exchange: (AMQP default)：因为我们使用了一个默认的交换，我们用空字符串（“”）来标识。

广播的机制:它只是将收到的所有消息广播到它所知道的所有队列中。这正是我们记录器所需要的。
注意：我们需要在发送时提供一个routing_key，但是对于扇出交换，它的值将被忽略 **

该交换参数''是交易所的名称。空字符串表示默认或无名交换：使用routing_key指定的名称
（如果存在）将消息路由到队列。

如何让:让服务器为我们选择一个随机队列名称。我们可以通过不将队列参数提供给queue_declare来实现这一点？
result = channel.queue_declare(exclusive=True)
result.method.queue是队列的名字.

交换和队列之间的关系称为绑定:
channel.queue_bind（exchange = 'logs'，
                   队列= result.method.queue）


#如果没有队列绑定到exchange:
如果没有队列绑定到交换机上，这些消息将会丢失，但这对我们来说没问题;
如果没有消费者正在收听，我们可以放心地丢弃消息。


路由:绑定是交换和队列之间的关系。这可以简单地理解为：队列对来自该交换机的消息感兴趣。
绑定键的含义取决于交换类型.
我们之前使用的exchange='fanout'忽略了绑定键的含义.

channel.queue_bind（exchange = exchange_name，
                   queue = queue_name，
                   routing_key = 'black'）

fanout:这不会给我们太多的灵活性 - 它只能无意识地播放。
我们将使用直接交换。直接交换背后的路由算法很简单 - 消息进入队列，
其绑定密钥与消息的路由密钥完全匹配。

direct:
如果消息的路由秘钥与queue所绑定的秘钥相同,那么这个消息就会进入到队列.
a message goes to the queues whose binding key exactly matches the routing
key of the message

通过direct可以实现fanout:在这种情况下，direct交换就像fanout一样，并将消息广播到所有匹配的队列。

top:通过direct并获得了选择性接收日志的可能性：尽管使用直接交换改进了我们的系统，
但它仍然有局限性 - 它不能根据多个标准进行路由。

发送到话题交换的消息不能有任意的routing_key,即它必须是由点分隔的单词列表。**
单词可以是任何东西，但通常它们指定了与该消息相关的一些功能。一些有效的路由键例子：
“ stock.usd.nyse ”，“ nyse.vmw ”，“ quick.orange.rabbit ”。只要您愿意，
路由键中可以有多少个字，最多255个字节。

话题交换背后的逻辑 类似于直接话题 - 使用特定路由键发送的消息将被传递到与匹配绑定键绑定的所有队列。

* (star) can substitute for exactly one word.
# (hash) can substitute for zero or more words.

路由键routing_key 与 绑定键 binding_key **

只会传递到第二个队列一次，即使它匹配了两个绑定。**

话题交换功能强大，可以像其他交流一样行事。
当使用“ ＃ ”（散列）绑定键绑定队列时，它将接收所有消息，而不管路由密钥如何 - 就像在扇出交换中一样。
当在绑定中没有使用特殊字符“ * ”（星号）和“ ＃ ”（散列）时，主题交换将像直接交换一样。???


**通过direct可以模拟fanout**
**通过tip可以模拟direct和fanout**


测试:
1：To receive all the logs run
python receive_logs_topic.py "#"(此时生产者无论发送什么消息都是可以接受到的.)

2:To receive all logs from the facility "kern":
python consumer.py kern.* (注意:*代表匹配一个单词,不是一个字符.)

3:Or if you want to hear only about "critical" logs
python receive_logs_topic.py "*.critical"

4:You can create multiple bindings
python receive_logs_topic.py "kern.*" "*.critical"

5:You can create multiple bindings:
python receive_logs_topic.py "kern.*" "*.critical"

6:...


topic:*可以匹配任意一个单词
      #可以匹配0个或多个单词.


远程过程调用协议:RPC
如果我们需要在远程计算机上运行某个功能并等待结果呢？这种模式通常称为远程过程调用或RPC。
我们将使用RabbitMQ构建一个RPC系统：一个客户端和一个可扩展的RPC服务器。

RPC客户端:创建一个简单的客户端类,它将公开一个名为call的方法,它发送一个RPC请求并阻塞，直到收到答案：

回调队列:
一般来说,通过RabbitMQ来执行RPC是很容易的。客户端发送请求消息，服务器回复响应消息。
为了接收响应，客户端需要发送一个call_back的队列地址和请求。

pika.BasicProperties的相关属性:
delivery_mode：将消息标记为持久（值为2）或瞬态（任何其他值）.
content_type：用于描述编码的MIME类型。例如，对于经常使用的JSON编码，将此属性设置为application / json是一种很好的做法。
reply_to：通常用于命名回调队列。
correlation_id：用于将RPC响应与请求关联起来。  correlation:相关性,相互关系.

我们建议为每个RPC请求创建一个回调队列。这是非常低效的，
但幸运的是有一个更好的方法 - 让我们为每个客户端创建一个回调队列。

correlation_id:
在该队列中收到回复后，不清楚回复属于哪个请求。那是什么时候使用 correlation_id属性。
我们将把它设置为每个请求的唯一值。稍后，当我们在回调队列中收到消息时，我们会查看此属性，
并基于此属性，我们将能够将响应与请求进行匹配。如果我们看到未知的 correlation_id值，
我们可以放心地丢弃该消息 - 它不属于我们的请求。

您可能会问，为什么我们应该忽略回调队列中的未知消息，而不是因为错误而失败？这是由于服务器端可能出现竞争状况。
虽然不太可能，但在发送给我们答案之后，但在发送请求的确认消息之前，RPC服务器可能会死亡。如果发生这种情况，
重新启动的RPC服务器将再次处理该请求。这就是为什么在客户端，我们必须优雅地处理重复的响应，理想情况下RPC应该是幂等的。

RPC通信机制:
当客户端启动时，它创建一个匿名的唯一的回叫队列。
对于RPC请求，客户端将发送具有两个属性的消息：reply_to，该消息 设置为回调队列和correlation_id，该值设置为每个请求的唯一值。
该请求被发送到rpc_queue队列。
RPC worker（又名：服务器）正在等待该队列上的请求。当出现请求时，它执行该作业，并使用reply_to字段中的队列将结果发送回客户端。
客户端在回调队列中等待数据。当出现消息时，它会检查correlation_id属性。如果它匹配来自请求的值，则返回对应用程序的响应。





























